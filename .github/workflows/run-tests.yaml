
name: Run Tests

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pixo-platform

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.54
          install-mode: "goinstall"
          args: --timeout=30m
          working-directory: ./pixo-platform

  setup-cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

      - name: Create k3d Cluster and Set Kubeconfig
        run: |
          k3d cluster create test-cluster
          k3d kubeconfig write test-cluster > $HOME/.config/kubeconfig-test-cluster.yaml

      - name: Upload Kubeconfig Artifact
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig
          path: ${{ github.workspace }}/.config/kubeconfig-test-cluster.yaml

      - name: Check cluster health
        run: |
          kubectl wait --for=condition=ready node --all --timeout=300s

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Add Helm Repositories
        run: |
          helm repo add agones https://agones.dev/chart/stable
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Install Agones via Helm
        run: |
          helm install agones agones/agones --namespace agones-system --create-namespace

      - name: Install Argo Workflows via Helm
        run: |
          helm install argo-workflows argo/argo-workflows --namespace argo-workflows --create-namespace

      - name: Verify CRDs are ready
        run: |
          for crd in gameservers.agones.dev gameserversets.agones.dev fleets.agones.dev fleetautoscalers.autoscaling.agones.dev; do
            kubectl wait --for=condition=established --timeout=300s crd/$crd
          done

      - name: Wait for Agones to be ready
        run: |
          kubectl wait --namespace agones-system --for=condition=ready pod --selector=app=agones --timeout=300s

      - name: Wait for Argo Workflows to be ready
        run: |
          kubectl wait --namespace argo-workflows --for=condition=ready pod --selector=app.kubernetes.io/instance=argo-workflows --timeout=300s

  test:
    runs-on: ubuntu-latest
    needs: [ setup-cluster ]
    defaults:
      run:
        working-directory: ./pixo-platform
#    strategy:
#      fail-fast: false
#      matrix:
#        containers: [ 1, 2, 3 ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Download Kubeconfig
        uses: actions/download-artifact@v2
        with:
          name: kubeconfig
          path: ${{ github.workspace }}/.config

      - name: Setup Google Cloud SDK
        run: |
          echo "$GOOGLE_JSON_KEY_CONTENTS" > $HOME/google-key.json
          gcloud auth activate-service-account --key-file=$HOME/google-key.json
        env:
          GOOGLE_JSON_KEY_CONTENTS: ${{ secrets.GOOGLE_JSON_KEY }}

      - name: Run Tests
        run: |
          go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
        env:
          KUBECONFIG: '${{ github.workspace }}/.config/kubeconfig-test-cluster.yaml'
          GOOGLE_JSON_KEY: '${{ github.workspace }}/google-key.json'
          GOOGLE_APPLICATION_CREDENTIALS: '${{ github.workspace }}/google-key.json'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  #      - name: Check Test Coverage
#        uses: vladopajic/go-test-coverage@v2
#        with:
#          config: pixo-platform/.coverage.yaml

  cleanup:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - name: Cleanup
        run: |
          k3d cluster delete test-cluster
          - name: Cleanup Kubeconfig

      - name: Cleanup Kubeconfig
        if: always()
        run: |
          rm -f $KUBECONFIG

permissions:
  contents: read
